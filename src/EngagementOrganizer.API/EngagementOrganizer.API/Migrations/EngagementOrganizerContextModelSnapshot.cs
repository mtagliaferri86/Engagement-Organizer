// <auto-generated />
using System;
using EngagementOrganizer.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EngagementOrganizer.API.Migrations
{
    [DbContext(typeof(EngagementOrganizerContext))]
    partial class EngagementOrganizerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EngagementOrganizer.API.Models.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AvailabilityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CalendarName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Project")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireTravel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TravelBooked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TypeID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EngagementOrganizer.API.Models.AppointmentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Billable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireCustomer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AppointmentType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Billable = true,
                            Description = "Delivery",
                            RequireCustomer = true
                        },
                        new
                        {
                            ID = 2,
                            Billable = true,
                            Color = "#ffe95b",
                            Description = "Sickness",
                            RequireCustomer = false,
                            ShortDescription = "SICK",
                            TextColor = "#000000"
                        },
                        new
                        {
                            ID = 3,
                            Billable = false,
                            Description = "Shadowing",
                            RequireCustomer = true
                        },
                        new
                        {
                            ID = 4,
                            Billable = false,
                            Color = "#cecece",
                            Description = "Holiday",
                            RequireCustomer = false,
                            ShortDescription = "H",
                            TextColor = "#000000"
                        },
                        new
                        {
                            ID = 5,
                            Billable = false,
                            Color = "#efb8b8",
                            Description = "National Celebration",
                            RequireCustomer = false,
                            ShortDescription = "CEL",
                            TextColor = "#000000"
                        },
                        new
                        {
                            ID = 6,
                            Billable = false,
                            Color = "#3087c1",
                            Description = "Company Event",
                            RequireCustomer = false,
                            ShortDescription = "COM",
                            TextColor = "#ffffff"
                        },
                        new
                        {
                            ID = 7,
                            Billable = false,
                            Color = "#97ff8c",
                            Description = "Blocker",
                            RequireCustomer = false,
                            ShortDescription = "B",
                            TextColor = "#000000"
                        },
                        new
                        {
                            ID = 99,
                            Billable = true,
                            Color = "#0000ff",
                            Description = "Upstream Calendar",
                            RequireCustomer = false,
                            ShortDescription = "Upstream",
                            TextColor = "#ffffff"
                        });
                });

            modelBuilder.Entity("EngagementOrganizer.API.Models.Calendar", b =>
                {
                    b.Property<string>("CalendarName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .HasColumnType("TEXT");

                    b.HasKey("CalendarName");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("EngagementOrganizer.API.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectColors")
                        .HasColumnType("TEXT");

                    b.Property<string>("Referral")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EngagementOrganizer.API.Models.Appointment", b =>
                {
                    b.HasOne("EngagementOrganizer.API.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("EngagementOrganizer.API.Models.AppointmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
