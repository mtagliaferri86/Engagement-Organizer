/**
 * Engagement Organizer
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Appointment } from '../model/appointment';
import { AppointmentExtraInfo } from '../model/appointmentExtraInfo';
import { Calendar } from '../model/calendar';
import { CalendarDisplay } from '../model/calendarDisplay';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AppointmentsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsBackupGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAppointmentsBackupGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAppointmentsBackupGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAppointmentsBackupGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Appointments/Backup`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param calendarName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsCalendarCalendarNameDelete(calendarName: string, observe?: 'body', reportProgress?: boolean): Observable<Calendar>;
    public apiAppointmentsCalendarCalendarNameDelete(calendarName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Calendar>>;
    public apiAppointmentsCalendarCalendarNameDelete(calendarName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Calendar>>;
    public apiAppointmentsCalendarCalendarNameDelete(calendarName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (calendarName === null || calendarName === undefined) {
            throw new Error('Required parameter calendarName was null or undefined when calling apiAppointmentsCalendarCalendarNameDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Calendar>('delete',`${this.basePath}/api/Appointments/calendar/${encodeURIComponent(String(calendarName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param calendarName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsCalendarCalendarNameGet(calendarName: string, observe?: 'body', reportProgress?: boolean): Observable<Calendar>;
    public apiAppointmentsCalendarCalendarNameGet(calendarName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Calendar>>;
    public apiAppointmentsCalendarCalendarNameGet(calendarName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Calendar>>;
    public apiAppointmentsCalendarCalendarNameGet(calendarName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (calendarName === null || calendarName === undefined) {
            throw new Error('Required parameter calendarName was null or undefined when calling apiAppointmentsCalendarCalendarNameGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Calendar>('get',`${this.basePath}/api/Appointments/calendar/${encodeURIComponent(String(calendarName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param calendarName 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsCalendarCalendarNamePut(calendarName: string, body?: Calendar, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAppointmentsCalendarCalendarNamePut(calendarName: string, body?: Calendar, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAppointmentsCalendarCalendarNamePut(calendarName: string, body?: Calendar, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAppointmentsCalendarCalendarNamePut(calendarName: string, body?: Calendar, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (calendarName === null || calendarName === undefined) {
            throw new Error('Required parameter calendarName was null or undefined when calling apiAppointmentsCalendarCalendarNamePut.');
        }


        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/Appointments/calendar/${encodeURIComponent(String(calendarName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsCalendarPost(body?: Calendar, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAppointmentsCalendarPost(body?: Calendar, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAppointmentsCalendarPost(body?: Calendar, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAppointmentsCalendarPost(body?: Calendar, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/Appointments/calendar`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsCalendarsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Calendar>>;
    public apiAppointmentsCalendarsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Calendar>>>;
    public apiAppointmentsCalendarsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Calendar>>>;
    public apiAppointmentsCalendarsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Calendar>>('get',`${this.basePath}/api/Appointments/calendars`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param year 
     * @param calendarName 
     * @param display 
     * @param upstreamCustomTokenInput 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsGet(year?: number, calendarName?: string, display?: CalendarDisplay, upstreamCustomTokenInput?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentExtraInfo>>;
    public apiAppointmentsGet(year?: number, calendarName?: string, display?: CalendarDisplay, upstreamCustomTokenInput?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentExtraInfo>>>;
    public apiAppointmentsGet(year?: number, calendarName?: string, display?: CalendarDisplay, upstreamCustomTokenInput?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentExtraInfo>>>;
    public apiAppointmentsGet(year?: number, calendarName?: string, display?: CalendarDisplay, upstreamCustomTokenInput?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (calendarName !== undefined && calendarName !== null) {
            queryParameters = queryParameters.set('calendarName', <any>calendarName);
        }
        if (display !== undefined && display !== null) {
            queryParameters = queryParameters.set('display', <any>display);
        }

        let headers = this.defaultHeaders;
        if (upstreamCustomTokenInput !== undefined && upstreamCustomTokenInput !== null) {
            headers = headers.set('upstreamCustomTokenInput', String(upstreamCustomTokenInput));
        }

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AppointmentExtraInfo>>('get',`${this.basePath}/api/Appointments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsIdDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<Appointment>;
    public apiAppointmentsIdDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Appointment>>;
    public apiAppointmentsIdDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Appointment>>;
    public apiAppointmentsIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAppointmentsIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Appointment>('delete',`${this.basePath}/api/Appointments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsIdGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<Appointment>;
    public apiAppointmentsIdGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Appointment>>;
    public apiAppointmentsIdGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Appointment>>;
    public apiAppointmentsIdGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAppointmentsIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Appointment>('get',`${this.basePath}/api/Appointments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsIdPut(id: number, body?: Appointment, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAppointmentsIdPut(id: number, body?: Appointment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAppointmentsIdPut(id: number, body?: Appointment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAppointmentsIdPut(id: number, body?: Appointment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAppointmentsIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/Appointments/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsPost(body?: Appointment, observe?: 'body', reportProgress?: boolean): Observable<Appointment>;
    public apiAppointmentsPost(body?: Appointment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Appointment>>;
    public apiAppointmentsPost(body?: Appointment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Appointment>>;
    public apiAppointmentsPost(body?: Appointment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Appointment>('post',`${this.basePath}/api/Appointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAppointmentsUpstreamCustomTokenGet(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiAppointmentsUpstreamCustomTokenGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiAppointmentsUpstreamCustomTokenGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiAppointmentsUpstreamCustomTokenGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuthentication) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-Key"]) {
            headers = headers.set('X-API-Key', this.configuration.apiKeys["X-API-Key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/api/Appointments/upstreamCustomToken`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
